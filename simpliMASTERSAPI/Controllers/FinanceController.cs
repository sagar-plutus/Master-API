using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using ODLMWebAPI.BL.Interfaces;
using simpliMASTERSAPI.BL.Interfaces;
using ODLMWebAPI.DAL.Interfaces;
using ODLMWebAPI.Models;
using System.Net;
using ODLMWebAPI.StaticStuff;
using System.IO;
using Microsoft.AspNetCore.Hosting;
using OfficeOpenXml;
using Microsoft.AspNetCore.Http;
using NPOI.HSSF.UserModel;
using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;
using System.Data;
using System.Linq;
using System.Text;

namespace simpliMASTERSAPI.Controllers
{
    [Produces("application/json")]
    [Route("api/Finance")]
    public class FinanceController : Controller
    {
        #region Declaration & Constructors

        private readonly ITblFinLedgerBL tblFinLedgerBL;
        private readonly ICommon _iCommon;
        private readonly ITblConfigParamsBL _iTblConfigParamsBL;
        private IHostingEnvironment _hostingEnvironment;
        public FinanceController(IHostingEnvironment hostingEnvironment,ICommon iCommon, ITblFinLedgerBL tblFinLedgerBL, ITblConfigParamsBL iTblConfigParamsBL)
        {
            _iTblConfigParamsBL = iTblConfigParamsBL;
            this.tblFinLedgerBL = tblFinLedgerBL;
            _iCommon = iCommon;
        }

        #endregion

        #region GET

        [Route("GetAllChildLedgerList")]
        [ProducesResponseType(typeof(List<TblFinLedgerTO>), 200)]
        [ProducesResponseType(500)]
        [ProducesResponseType(404)]
        [HttpGet]
        public IActionResult GetAllChildLedgerList(long parentFinLedgerId)
        {
            try
            {
                List<TblFinLedgerTO> list = tblFinLedgerBL.SelectChildLedgerList(parentFinLedgerId);
                if (list != null)
                {
                    if (list.Count > 0)
                        return Ok(list);
                    else
                        return NoContent();
                }
                else
                {
                    return NotFound(list);
                }
            }
            catch (Exception)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }
        [Route("GetAutoGeneratedLedgerCode")]
        [HttpGet]
        public ResultMessage GetAutoGeneratedLedgerCode(Int32 ledgerTypeId, long parentFinLedgerId)
        {
            try
            {
                return tblFinLedgerBL.GetAutoGeneratedLedgerCode(ledgerTypeId,parentFinLedgerId);
            }
            catch (Exception)
            {
                return null;
            }
        }


        [Route("GetLedgerListForSearchByLedgerNameOrCode")]
        [ProducesResponseType(typeof(List<TblFinLedgerTO>), 200)]
        [ProducesResponseType(500)]
        [ProducesResponseType(404)]
        [HttpGet]
        public IActionResult GetLedgerListForSearchByLedgerNameOrCode(string LedgerName, string LedgerCode,Int32 Type)
        {
            try
            {
                List<TblFinLedgerTO> list = tblFinLedgerBL.SelectLedgerForSearchList(LedgerName, LedgerCode, Type);
                if (list != null)
                {
                    if (list.Count > 0)
                        return Ok(list);
                    else
                        return NoContent();
                }
                else
                {
                    return NotFound(list);
                }
            }
            catch (Exception)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }

        [Route("GetLedgerListByParentId")]
        [ProducesResponseType(typeof(List<TblFinLedgerTO>), 200)]
        [ProducesResponseType(500)]
        [ProducesResponseType(404)]
        [HttpGet]
        public IActionResult GetLedgerListByParentId(long parentFinLedgerId)
        {
            try
            {
                List<TblFinLedgerTO> list = tblFinLedgerBL.SelectLedgerListByParentId(parentFinLedgerId);
                if (list != null)
                {
                    if (list.Count > 0)
                        return Ok(list);
                    else
                        return NoContent();
                }
                else
                {
                    return NotFound(list);
                }
            }
            catch (Exception)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }

        [Route("GetLedgerDetails")]
        [ProducesResponseType(typeof(TblFinLedgerTO), 200)]
        [ProducesResponseType(500)]
        [ProducesResponseType(404)]
        [HttpGet]
        public IActionResult GetLedgerDetails(long finLedgerId)
        {
            try
            {
                TblFinLedgerTO tblFinLedgerTO = tblFinLedgerBL.SelectLedgerTO(finLedgerId);
                if (tblFinLedgerTO != null)
                {
                    return Ok(tblFinLedgerTO);
                }
                else
                {
                    return NotFound();
                }
            }
            catch (Exception)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }


        [Route("GetFinActTypeDropDownList")]
        [ProducesResponseType(typeof(DropDownTO), 200)]
        [ProducesResponseType(500)]
        [ProducesResponseType(404)]
        [HttpGet]
        public IActionResult GetFinActTypeDropDownList(long finLedgerId)
        {
            try
            {
                List<DropDownTO> dropDownTOs = tblFinLedgerBL.SelectFinActTypeDropDownList();
                if (dropDownTOs != null)
                {
                    return Ok(dropDownTOs);
                }
                else
                {
                    return NotFound();
                }
            }
            catch (Exception)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }

        [Route("GetFinProjectsDropDownList")]
        [ProducesResponseType(typeof(DropDownTO), 200)]
        [ProducesResponseType(500)]
        [ProducesResponseType(404)]
        [HttpGet]
        public IActionResult GetFinProjectsDropDownList(long finLedgerId)
        {
            try
            {
                List<DropDownTO> dropDownTOs = tblFinLedgerBL.SelectFinProjectsDropDownList();
                if (dropDownTOs != null)
                {
                    return Ok(dropDownTOs);
                }
                else
                {
                    return NotFound();
                }
            }
            catch (Exception)
            {
                return StatusCode((int)HttpStatusCode.InternalServerError);
            }
        }

        #endregion

        #region POST

        [Route("SaveNewLedger")]
        [HttpPost]
        public ResultMessage SaveNewLedger([FromBody] TblFinLedgerTO tblFinLedgerTO)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {

                if (tblFinLedgerTO != null)
                {
                    DateTime serverDate = _iCommon.ServerDateTime;
                    tblFinLedgerTO.CreatedOn = serverDate;
                    tblFinLedgerTO.IsActive = 1;
                    return tblFinLedgerBL.SaveNewLedgerOrGroup(tblFinLedgerTO);
                }
                else
                {
                    resultMessage.DefaultBehaviour("tblFinLedgerTO Found NULL");
                    return resultMessage;
                }
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "SaveNewLedger");
                return resultMessage;
            }
        }

        [Route("UpdateNewLedger")]
        [HttpPost]
        public ResultMessage UpdateNewLedger([FromBody] TblFinLedgerTO tblFinLedgerTO)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {

                if (tblFinLedgerTO != null)
                {
                    DateTime serverDate = _iCommon.ServerDateTime;
                    tblFinLedgerTO.UpdatedOn = serverDate;
                    tblFinLedgerTO.IsActive = 1;
                    return tblFinLedgerBL.UpdateFinLedger(tblFinLedgerTO);
                }
                else
                {
                    resultMessage.DefaultBehaviour("tblFinLedgerTO Found NULL");
                    return resultMessage;
                }
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "UpdateNewLedger");
                return resultMessage;
            }
        }


        [Route("MigrateDefaultChartOfAccFromSAP")]
        [HttpPost]
        public ResultMessage MigrateDefaultChartOfAccFromSAP()
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                return tblFinLedgerBL.MigrateDefaultChartOfActFromSAP();
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "SaveNewLedger");
                return resultMessage;
            }
        }


        [Route("ImportChartOfAccountFromExcel")]
        [HttpPost]
        public ResultMessage ImportChartOfAccountFromExcel([FromForm(Name = "myFile")]IFormFile myFile)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                string path = System.IO.Directory.GetCurrentDirectory();
                IFormFile file = Request.Form.Files[0];
                string folderName = "Upload";
                string webRootPath = path;
                string newPath = Path.Combine(webRootPath, folderName);
                StringBuilder sb = new StringBuilder();
                if (!Directory.Exists(newPath))
                {
                    Directory.CreateDirectory(newPath);
                }

                string sFileExtension = Path.GetExtension(file.FileName).ToLower();
                ISheet sheet;
                string fullPath = Path.Combine(newPath, file.FileName);

                using (var stream = new FileStream(fullPath, FileMode.Create))
                {
                    file.CopyTo(stream);
                    stream.Position = 0;
                    if (sFileExtension == ".xls")
                    {
                        HSSFWorkbook hssfwb = new HSSFWorkbook(stream); //This will read the Excel 97-2000 formats  
                        sheet = hssfwb.GetSheetAt(0); //get first sheet from workbook  
                    }
                    else
                    {
                        XSSFWorkbook hssfwb = new XSSFWorkbook(stream); //This will read 2007 Excel format  
                        sheet = hssfwb.GetSheetAt(0); //get first sheet from workbook   
                    }

                    DataTable dt = new DataTable(sheet.SheetName);

                    // write header row
                    IRow headerRow = sheet.GetRow(0);
                    foreach (ICell headerCell in headerRow)
                    {
                        dt.Columns.Add(headerCell.ToString());
                    }

                    // write the rest
                    int rowIndex = 0;
                    foreach (IRow row in sheet)
                    {
                        // skip header row
                        if (rowIndex++ == 0) continue;
                        DataRow dataRow = dt.NewRow();
                        dataRow.ItemArray = row.Cells.Select(c => c.ToString()).ToArray();
                        dt.Rows.Add(dataRow);
                    }

                    resultMessage =tblFinLedgerBL.ImportExcelCOAToSystem(dt);

                }

                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "ImportChartOfAccountFromExcel");
                return resultMessage;
            }
        }

        #endregion

        #region PUT

        [Route("UpdateLedger")]
        [HttpPut]
        public ResultMessage UpdateLedger(TblFinLedgerTO tblFinLedgerTO)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {

                if (tblFinLedgerTO != null)
                {
                    DateTime serverDate = _iCommon.ServerDateTime;
                    tblFinLedgerTO.UpdatedOn = serverDate;
                    return tblFinLedgerBL.UpdateFinLedger(tblFinLedgerTO);
                }
                else
                {
                    resultMessage.DefaultBehaviour("tblFinLedgerTO Found NULL");
                    return resultMessage;
                }
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "UpdateLedger");
                return resultMessage;
            }
        }

        #endregion
    }
}