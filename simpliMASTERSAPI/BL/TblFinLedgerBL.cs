using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using ODLMWebAPI.Models;
using ODLMWebAPI.StaticStuff;
using System.Linq;
using simpliMASTERSAPI.BL.Interfaces;
using simpliMASTERSAPI.DAL.Interfaces;
using ODLMWebAPI.DAL.Interfaces;
using ODLMWebAPI.BL.Interfaces;
using System.Data;

namespace simpliMASTERSAPI.BL
{
    public class TblFinLedgerBL : ITblFinLedgerBL
    {
        #region Declaration & Construction

        private readonly IConnectionString _iConnectionString;
        private readonly ICommon _iCommon;
        private readonly ITblFinLedgerDAO _iTblFinLedgerDAO;
        private readonly ITblConfigParamsDAO _iTblConfigParamsDAO;

        public TblFinLedgerBL(ITblConfigParamsDAO _iTblConfigParamsDAO, ICommon iCommon, IConnectionString iConnectionString, ITblConfigParamsDAO iTblConfigParamsDAO, ITblConfigParamHistoryDAO iTblConfigParamHistoryDAO, ITblFinLedgerDAO _itblFinLedgerDAO)
        {
            _iConnectionString = iConnectionString;
            _iCommon = iCommon;
            this._iTblFinLedgerDAO = _itblFinLedgerDAO;
            this._iTblConfigParamsDAO = _iTblConfigParamsDAO;
        }

        #endregion

        #region Selection
        public List<TblFinLedgerTO> SelectChildLedgerList(long parentFinLedgerId)
        {


            return _iTblFinLedgerDAO.SelectChildLedgerList(parentFinLedgerId);
        }

        public List<TblFinLedgerTO> SelectLedgerForSearchList(string LedgerName, string LedgerCode, Int32 Type)
        {          
            return _iTblFinLedgerDAO.SelectLedgerListForSearch(LedgerName, LedgerCode, Type);
        }

        public List<TblFinLedgerTO> SelectLedgerListByParentId(long parentFinLedgerId)
        {
            List<TblFinLedgerTO> searchList = new List<TblFinLedgerTO>();
            if (parentFinLedgerId > 0)
            {
                searchList= SelectLedgerListByParent(parentFinLedgerId, searchList);
            }
            return searchList;
        }

        public List<TblFinLedgerTO> SelectLedgerListByParent(long parentFinLedgerId,List<TblFinLedgerTO> searchList)
        {
            TblFinLedgerTO tblFinLedgerTO = _iTblFinLedgerDAO.SelectLedgerListByParentId(parentFinLedgerId);
            if (tblFinLedgerTO != null) {
                searchList.Add(tblFinLedgerTO);
                if (tblFinLedgerTO.ParentFinLedgerId > 0)
                {
                    SelectLedgerListByParent(tblFinLedgerTO.ParentFinLedgerId, searchList);
                }
            }
            return searchList;
        }

        public TblFinLedgerTO SelectLedgerTO(long finLedgerId)
        {
            return _iTblFinLedgerDAO.SelectLedgerTO(finLedgerId);
        }

        public List<DropDownTO> SelectFinActTypeDropDownList()
        {
            return _iTblFinLedgerDAO.SelectFinActTypeDropDownList();

        }
        public List<DropDownTO> SelectFinProjectsDropDownList()
        {
            return _iTblFinLedgerDAO.SelectFinProjectsDropDownList();

        }

        //public ResultMessage GetAutoGeneratedLedgerCode(Int32 ledgerTypeId, long parentFinLedgerId)
        //{
        //    ResultMessage resultMessage = new ResultMessage();
        //    string ledgerCode = string.Empty;
        //    Int32 uptoNoOfDigits = 1;

        //    List<TblFinLedgerTO> tblFinLedgerTOChildList = _iTblFinLedgerDAO.SelectChildLedgerList(parentFinLedgerId);
        //    TblFinLedgerTO tblFinLedgerTO = _iTblFinLedgerDAO.SelectLedgerTO(parentFinLedgerId);

        //    if(tblFinLedgerTO != null)
        //    {
        //        if (tblFinLedgerTOChildList == null)
        //        {
        //            string parentCode = tblFinLedgerTO.LedgerCode;
        //            if (!String.IsNullOrEmpty(parentCode))
        //            {
        //                string firstChar = parentCode.ToCharArray().ElementAt(0).ToString();
        //                ledgerCode = GetLedgerCode(firstChar, 1, uptoNoOfDigits);

        //            }
        //        }
        //    }




        //    if (ledgerTypeId == (int)Constants.FinLedgerTypeE.LEDGER)
        //    {

        //        TblConfigParamsTO configParamForLedger = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(Constants.ADD_LEDGER_LEVEL_LIMIT);
        //        if (configParamForLedger != null && configParamForLedger.ConfigParamVal != null)
        //        {
        //            uptoNoOfDigits = Convert.ToInt32(configParamForLedger.ConfigParamVal.ToString());
        //        }

        //        if(tblFinLedgerTOChildList != null && tblFinLedgerTOChildList.Count > 0)
        //            tblFinLedgerTOChildList = tblFinLedgerTOChildList.Where(a => a.Type == (int)Constants.FinLedgerTypeE.LEDGER).ToList();
        //    }
        //    else if (ledgerTypeId == (int)Constants.FinLedgerTypeE.GROUP)
        //    {
        //        TblConfigParamsTO configParamForGroup = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(Constants.ADD_GROUP_LEVEL_LIMIT);
        //        if (configParamForGroup != null && configParamForGroup.ConfigParamVal != null)
        //        {
        //            uptoNoOfDigits = Convert.ToInt32(configParamForGroup.ConfigParamVal.ToString());
        //        }

        //        if (tblFinLedgerTOChildList != null && tblFinLedgerTOChildList.Count > 0)
        //            tblFinLedgerTOChildList = tblFinLedgerTOChildList.Where(a => a.Type == (int)Constants.FinLedgerTypeE.GROUP).ToList();
        //    }

        //    if(tblFinLedgerTO != null)
        //    {
        //        if ((tblFinLedgerTOChildList == null || tblFinLedgerTOChildList.Count > 0) && tblFinLedgerTO.ParentFinLedgerId == 0)
        //        {
        //            string parentCode = tblFinLedgerTO.LedgerCode;
        //            if (!String.IsNullOrEmpty(parentCode))
        //            {
        //                string firstChar = parentCode.ToCharArray().ElementAt(0).ToString();
        //                ledgerCode = GetLedgerCode(firstChar, 1, uptoNoOfDigits);

        //                }
        //        }
        //        else if(tblFinLedgerTO.ParentFinLedgerId > 0)
        //        {
        //            Int32 maxCount = 0;

        //            if(tblFinLedgerTOChildList != null && tblFinLedgerTOChildList.Count > 0)
        //                maxCount = tblFinLedgerTOChildList.Count;

        //            maxCount = maxCount + 1;

        //            if (maxCount.ToString().Length != uptoNoOfDigits.ToString().Length)
        //            {
        //                //Can Not add
        //                resultMessage.DefaultBehaviour();
        //                resultMessage.DisplayMessage = "Can not add code as limit exceeds";
        //                return resultMessage;
        //            }

        //            string parentCode = tblFinLedgerTO.LedgerCode;
        //            if (!String.IsNullOrEmpty(parentCode))
        //            {
        //                ledgerCode = GetLedgerCode(parentCode, maxCount, uptoNoOfDigits);
        //            }
        //        }
        //    }

        //    resultMessage.DefaultSuccessBehaviour();
        //    resultMessage.Tag = ledgerCode;
        //    return resultMessage;

        //}
        public string GetAutoGeneratedSAPLedgerCode()
        {
            ResultMessage resultMessage = new ResultMessage();
            string ledgerCode = string.Empty;
            int nLedgerCode = 0;
            nLedgerCode = _iTblFinLedgerDAO.GetAutoGeneratedSAPLedgerCode();
            if (nLedgerCode > 0)
            {
                ledgerCode = "_SYS" + nLedgerCode.ToString().PadLeft(11, '0');
            }
            return ledgerCode;
        }

        public ResultMessage GetAutoGeneratedLedgerCode(Int32 ledgerTypeId, long parentFinLedgerId)
        {
            ResultMessage resultMessage = new ResultMessage();
            string ledgerCode = string.Empty;
            Boolean isChildPresent = true;
            Int32 uptoNoOfDigits = 1;

            //if (ledgerTypeId == (int)Constants.FinLedgerTypeE.LEDGER)
            //{
            //    ledgerCode = GetAutoGeneratedSAPLedgerCode();
            //    if (string.IsNullOrEmpty(ledgerCode))
            //    {
            //        resultMessage.DefaultBehaviour("Ledger Code Not Generated.");
            //        resultMessage.DisplayMessage = "Ledger Code Not Generated";
            //        return resultMessage;
            //    }
            //    resultMessage.DefaultSuccessBehaviour();
            //    resultMessage.Tag = ledgerCode;
            //    return resultMessage;
            //}

            List<TblFinLedgerTO> tblFinLedgerTOChildList = _iTblFinLedgerDAO.SelectChildLedgerList(parentFinLedgerId);
            if (tblFinLedgerTOChildList == null || tblFinLedgerTOChildList.Count == 0)
            {
                //no child
                isChildPresent = false;
            }

            if (ledgerTypeId == (int)Constants.FinLedgerTypeE.LEDGER)
            {
                TblConfigParamsTO configParamForLedger = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(Constants.ADD_LEDGER_LEVEL_LIMIT);
                if (configParamForLedger != null && configParamForLedger.ConfigParamVal != null)
                {
                    uptoNoOfDigits = Convert.ToInt32(configParamForLedger.ConfigParamVal.ToString());
                }

                if (isChildPresent)
                    tblFinLedgerTOChildList = tblFinLedgerTOChildList.Where(a => a.Type == (int)Constants.FinLedgerTypeE.LEDGER).ToList();
            }
            else if (ledgerTypeId == (int)Constants.FinLedgerTypeE.GROUP)
            {
                TblConfigParamsTO configParamForGroup = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(Constants.ADD_GROUP_LEVEL_LIMIT);
                if (configParamForGroup != null && configParamForGroup.ConfigParamVal != null)
                {
                    uptoNoOfDigits = Convert.ToInt32(configParamForGroup.ConfigParamVal.ToString());
                }

                if (isChildPresent)
                    tblFinLedgerTOChildList = tblFinLedgerTOChildList.Where(a => a.Type == (int)Constants.FinLedgerTypeE.GROUP).ToList();
            }

            if (tblFinLedgerTOChildList == null || tblFinLedgerTOChildList.Count == 0)
            {
                //no child
                isChildPresent = false;
            }

            TblFinLedgerTO tblFinLedgerTO = _iTblFinLedgerDAO.SelectLedgerTO(parentFinLedgerId);
            if (tblFinLedgerTO != null)
            {

                if (tblFinLedgerTO.ParentFinLedgerId > 0)
                {
                    //get child list
                    Int32 maxCount = tblFinLedgerTOChildList.Count;
                    maxCount = maxCount + 1;

                    if (maxCount.ToString().Length != uptoNoOfDigits.ToString().Length)
                    {
                        //Can Not add
                        resultMessage.DefaultBehaviour();
                        resultMessage.DisplayMessage = "Can not add code as limit exceeds";
                        return resultMessage;
                    }

                    string parentCode = tblFinLedgerTO.LedgerCode;
                    if (!String.IsNullOrEmpty(parentCode))
                    {

                        ledgerCode = GetLedgerCode(parentCode, maxCount, uptoNoOfDigits);

                        //Int32 number = 1;

                        //if (uptoNoOfDigits == 1)
                        //    ledgerCode = string.Concat(parentCode, maxCount);
                        //else
                        //{
                        //    string temp = maxCount.ToString().PadLeft(uptoNoOfDigits, '0');
                        //    ledgerCode = string.Concat(parentCode, temp);
                        //}


                    }

                }
                else if (isChildPresent && tblFinLedgerTO.ParentFinLedgerId == 0)
                {
                    //get child list
                    Int32 maxCount = tblFinLedgerTOChildList.Count;
                    maxCount = maxCount + 1;

                    if (maxCount.ToString().Length != uptoNoOfDigits.ToString().Length)
                    {
                        //Can Not add
                        resultMessage.DefaultBehaviour();
                        resultMessage.DisplayMessage = "Can not add code as limit exceeds";
                        return resultMessage;
                    }

                    string parentCode = tblFinLedgerTO.LedgerCode;
                    if (!String.IsNullOrEmpty(parentCode))
                    {
                        string firstChar = parentCode.ToCharArray().ElementAt(0).ToString();

                        ledgerCode = GetLedgerCode(firstChar, maxCount, uptoNoOfDigits);

                        //Int32 number = 1;

                        //if (uptoNoOfDigits == 1)
                        //    ledgerCode = string.Concat(firstChar, maxCount);
                        //else
                        //{
                        //    string temp = maxCount.ToString().PadLeft(uptoNoOfDigits, '0');
                        //    ledgerCode = string.Concat(firstChar, temp);
                        //}


                    }
                }
                else
                {
                    //As there is no child get first digit of parent code

                    string parentCode = tblFinLedgerTO.LedgerCode;
                    if (!String.IsNullOrEmpty(parentCode))
                    {
                        string firstChar = parentCode.ToCharArray().ElementAt(0).ToString();


                        ledgerCode = GetLedgerCode(firstChar, 1, uptoNoOfDigits);
                        //Int32 number = 1;

                        //if (uptoNoOfDigits == 1)
                        //{
                        //    ledgerCode = string.Concat(firstChar, 1);
                        //}
                        //else
                        //{
                        //    string temp = number.ToString().PadLeft(uptoNoOfDigits, '0');
                        //    ledgerCode = string.Concat(firstChar, temp);
                        //}

                    }
                }
            }

            resultMessage.DefaultSuccessBehaviour();
            resultMessage.Tag = ledgerCode;
            return resultMessage;
        }


        public string GetLedgerCode(string codeStr, Int32 maxCount, Int32 upToDigits)
        {
            string ledgerCode = string.Empty;

            if (upToDigits == 1)
            {
                ledgerCode = string.Concat(codeStr, maxCount);
            }
            else
            {
                string temp = maxCount.ToString().PadLeft(upToDigits - codeStr.Length, '0');
                if (temp.Length == 1)
                {
                    ledgerCode = string.Concat(codeStr.Substring(0, upToDigits - 1), temp);
                }
                else
                {
                    ledgerCode = string.Concat(codeStr, temp);
                }
            }

            return ledgerCode;

        }

        #endregion

        #region Insertion

        public ResultMessage SaveNewLedgerOrGroup(TblFinLedgerTO tblFinLedgerTO)
        {
            ResultMessage resultMessage = new ResultMessage();
            String sqlConnStr = _iConnectionString.GetConnectionString(Constants.CONNECTION_STRING);
            SqlConnection conn = new SqlConnection(sqlConnStr);
            SqlTransaction tran = null;
            Boolean isSAPEnable = false;
            try
            {
                TblConfigParamsTO tblConfigParamsTOSAPService = _iTblConfigParamsDAO.SelectTblConfigParams(Constants.SAPB1_SERVICES_ENABLE);
                if (tblConfigParamsTOSAPService != null)
                {
                    if (Convert.ToInt32(tblConfigParamsTOSAPService.ConfigParamVal) == 1)
                    {
                        isSAPEnable = true;
                    }
                }

                resultMessage = GetAutoGeneratedLedgerCode(tblFinLedgerTO.Type, tblFinLedgerTO.ParentFinLedgerId);
                if(resultMessage.MessageType != ResultMessageE.Information)
                {
                    resultMessage.DefaultBehaviour("Ledger Code Not Generated.");
                    resultMessage.DisplayMessage = "Ledger Code Not Generated";
                    return resultMessage;
                }

                if(resultMessage.Tag != null)
                    tblFinLedgerTO.LedgerCode = resultMessage.Tag.ToString();

                conn.Open();
                tran = conn.BeginTransaction();
           
                #region Check Duplication Of Ledger Code
                if (tblFinLedgerTO.LedgerCode != null && !String.IsNullOrEmpty(tblFinLedgerTO.LedgerCode))
                {

                    Boolean isDuplicateLedger = _iTblFinLedgerDAO.isDuplicateLedgerCode(tblFinLedgerTO.LedgerCode, tblFinLedgerTO.LedgerName, 1);
                    if (isDuplicateLedger)
                    {
                        tran.Rollback();
                        resultMessage.DefaultBehaviour("Ledger Code Already added.");
                        resultMessage.DisplayMessage = "Ledger Code Already added";
                        return resultMessage;
                    }

                }
                #endregion

                #region Check Duplication Of Ledger Name
                if (tblFinLedgerTO.LedgerName != null && !String.IsNullOrEmpty(tblFinLedgerTO.LedgerName))
                {
                    if (tblFinLedgerTO.LedgerName != null && tblFinLedgerTO.LedgerName != "")
                    {
                        Boolean isDuplicateLedger = _iTblFinLedgerDAO.isDuplicateLedgerCode(tblFinLedgerTO.LedgerCode, tblFinLedgerTO.LedgerName, 2);
                        if (isDuplicateLedger)
                        {
                            tran.Rollback();
                            resultMessage.DefaultBehaviour("Ledger Name Already added.");
                            resultMessage.DisplayMessage = "Ledger Name Already added";
                            return resultMessage;
                        }
                    }
                    else
                    {
                        string strType = "Ledger";
                        if (tblFinLedgerTO.Type == 1)
                        {
                            strType = "Group";
                        }
                        tran.Rollback();
                        resultMessage.DefaultBehaviour("Please add "+ strType + " Name.");
                        resultMessage.DisplayMessage = "Please add "+ strType + " Name.";
                        return resultMessage;
                    }

                }
                else
                {
                    string strType = "Ledger";
                    if (tblFinLedgerTO.Type == 1)
                    {
                        strType = "Group";
                    }
                    tran.Rollback();
                    resultMessage.DefaultBehaviour("Please add " + strType + " Name.");
                    resultMessage.DisplayMessage = "Please add " + strType + " Name.";
                    return resultMessage;
                }
                #endregion

                //Added Dhananjay [26-12-2020]
                TblConfigParamsTO configParamForLedger = _iTblConfigParamsDAO.SelectTblConfigParamsValByName(Constants.CP_AUTHORIZE_LEDGER);
                if (configParamForLedger != null && configParamForLedger.ConfigParamVal != null)
                {
                    tblFinLedgerTO.StatusId = (int)Constants.LedgerStatusE.LEDGER_NEW;
                    if ( Convert.ToInt32(configParamForLedger.ConfigParamVal.ToString()) == 0)
                    {
                        tblFinLedgerTO.StatusId = (int)Constants.LedgerStatusE.LEDGER_AUTHORIZED;
                    }
                }

                int result = _iTblFinLedgerDAO.InsertTblFinLedger(tblFinLedgerTO, conn, tran);
                if (result != 1)
                {
                    tran.Rollback();
                    resultMessage.DefaultBehaviour("Error While InsertTblFinLedger in DAO");
                    return resultMessage;
                }

                if (isSAPEnable)
                {
                    resultMessage = SaveOrUpdateLedgerInSAP(tblFinLedgerTO, true);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        tran.Rollback();
                        return resultMessage;
                    }
                }

                tran.Commit();
                resultMessage.Tag = tblFinLedgerTO;
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "SaveNewLedgerOrGroup");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        private ResultMessage SaveOrUpdateLedgerInSAP(TblFinLedgerTO tblFinLedgerTO, Boolean isNewInsert)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                Boolean bWithSegment = false;
                TblConfigParamsTO tblConfigParamsTOCOAWithSegment = _iTblConfigParamsDAO.SelectTblConfigParams(Constants.CP_CHART_OF_ACCOUNTS_WITH_SEGMENT_YN);
                if (tblConfigParamsTOCOAWithSegment != null)
                {
                    if (tblConfigParamsTOCOAWithSegment.ConfigParamVal == "Y")
                    {
                        bWithSegment = true;
                    }
                }

                if (Startup.CompanyObject == null)
                {
                    resultMessage.DefaultBehaviour("SAP Company Connection Object found NULL");
                    return resultMessage;
                }
                SAPbobsCOM.ChartOfAccounts oChart = Startup.CompanyObject.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oChartOfAccounts);
                int result = -1;
                if (isNewInsert)
                {
                    oChart = DoLedgerSAPObjMapping(tblFinLedgerTO, oChart, bWithSegment);
                    result = oChart.Add();
                }
                else
                {
                    if (oChart.GetByKey(tblFinLedgerTO.LedgerCode))
                    {
                        oChart = DoLedgerSAPObjMapping(tblFinLedgerTO, oChart, bWithSegment);
                        result = oChart.Update();
                    }
                }
                if (result == 0)
                {
                    resultMessage.DefaultSuccessBehaviour();
                    return resultMessage;
                }
                else
                {
                    string errorinfor = Startup.CompanyObject.GetLastErrorDescription();
                    resultMessage.DefaultBehaviour(errorinfor);
                    return resultMessage;
                }
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "SaveOrUpdateLedgerInSAP");
                return resultMessage;
            }
        }

        private static SAPbobsCOM.ChartOfAccounts DoLedgerSAPObjMapping(TblFinLedgerTO tblFinLedgerTO, SAPbobsCOM.ChartOfAccounts oChart, Boolean bWithSegment)
        {
            if (tblFinLedgerTO.Type == (int)Constants.FinLedgerTypeE.LEDGER)
                oChart.ActiveAccount = SAPbobsCOM.BoYesNoEnum.tYES;
            else if (tblFinLedgerTO.Type == (int)Constants.FinLedgerTypeE.GROUP)
                oChart.ActiveAccount = SAPbobsCOM.BoYesNoEnum.tNO;

            if (tblFinLedgerTO.FinAccountTypeId == (int)Constants.FinAccountTypeE.REVENUE)
                oChart.AccountType = SAPbobsCOM.BoAccountTypes.at_Revenues;
            else if (tblFinLedgerTO.FinAccountTypeId == (int)Constants.FinAccountTypeE.EXPENSE)
                oChart.AccountType = SAPbobsCOM.BoAccountTypes.at_Expenses;
            else if (tblFinLedgerTO.FinAccountTypeId == (int)Constants.FinAccountTypeE.OTHER)
                oChart.AccountType = SAPbobsCOM.BoAccountTypes.at_Other;

            oChart.Code = tblFinLedgerTO.LedgerCode;
            oChart.Name = tblFinLedgerTO.LedgerName;

            if (tblFinLedgerTO.Type == (int)Constants.FinLedgerTypeE.LEDGER && bWithSegment == true) //Added Dhananjay [23-06-2021]
            {
                if(string.IsNullOrEmpty(tblFinLedgerTO.SegmentCode))
                {
                    tblFinLedgerTO.SegmentCode = "01";
                }
                oChart.FormatCode = tblFinLedgerTO.LedgerCode + tblFinLedgerTO.SegmentCode;
            }
            //oChart.FormatCode = "1300000101";
            if (tblFinLedgerTO.ParentLedgerCode != "" && tblFinLedgerTO.ParentLedgerCode != "-")
            {
                oChart.FatherAccountKey = tblFinLedgerTO.ParentLedgerCode;
            }
            oChart.ExternalCode = tblFinLedgerTO.IdFinLedger.ToString();

            if (!string.IsNullOrEmpty(tblFinLedgerTO.CurrencyCode))
                oChart.AcctCurrency = tblFinLedgerTO.CurrencyCode;

            if (tblFinLedgerTO.CashAct == 1)
                oChart.CashAccount = SAPbobsCOM.BoYesNoEnum.tYES;
            else
                oChart.CashAccount = SAPbobsCOM.BoYesNoEnum.tNO;

            if (tblFinLedgerTO.BlockManul == 1)
                oChart.BlockManualPosting = SAPbobsCOM.BoYesNoEnum.tYES;
            else
                oChart.BlockManualPosting = SAPbobsCOM.BoYesNoEnum.tNO;

            if (tblFinLedgerTO.CashFlow == 1)
                oChart.CashFlowRelevant = SAPbobsCOM.BoYesNoEnum.tYES;
            else
                oChart.CashFlowRelevant = SAPbobsCOM.BoYesNoEnum.tNO;

            if (tblFinLedgerTO.Confidential == 1)
                oChart.Protected = SAPbobsCOM.BoYesNoEnum.tYES;
            else
                oChart.Protected = SAPbobsCOM.BoYesNoEnum.tNO;

            if (tblFinLedgerTO.ControlAct == 1)
                oChart.LockManualTransaction = SAPbobsCOM.BoYesNoEnum.tYES;
            else
                oChart.LockManualTransaction = SAPbobsCOM.BoYesNoEnum.tNO;

            if (tblFinLedgerTO.Reval == 1)
                oChart.RevaluationCoordinated = SAPbobsCOM.BoYesNoEnum.tYES;
            else
                oChart.RevaluationCoordinated = SAPbobsCOM.BoYesNoEnum.tNO;
            return oChart;
        }

        #endregion

        #region Updation

        public ResultMessage UpdateFinLedger(TblFinLedgerTO tblFinLedgerTO)
        {
            ResultMessage resultMessage = new ResultMessage();
            String sqlConnStr = _iConnectionString.GetConnectionString(Constants.CONNECTION_STRING);
            SqlConnection conn = new SqlConnection(sqlConnStr);
            SqlTransaction tran = null;
            Boolean isSAPEnable = false;
            try
            {
                TblConfigParamsTO tblConfigParamsTOSAPService = _iTblConfigParamsDAO.SelectTblConfigParams(Constants.SAPB1_SERVICES_ENABLE);
                if (tblConfigParamsTOSAPService != null)
                {
                    if (Convert.ToInt32(tblConfigParamsTOSAPService.ConfigParamVal) == 1)
                    {
                        isSAPEnable = true;
                    }
                }

                conn.Open();
                tran = conn.BeginTransaction();

                #region Check Duplication Of Ledger Code
                if (tblFinLedgerTO.LedgerCode != null && !String.IsNullOrEmpty(tblFinLedgerTO.LedgerCode))
                {

                    Boolean isDuplicateLedger = _iTblFinLedgerDAO.isDuplicateLedgerCode(tblFinLedgerTO.LedgerCode, tblFinLedgerTO.LedgerName, 1,tblFinLedgerTO.IdFinLedger);
                    if (isDuplicateLedger)
                    {
                        tran.Rollback();
                        resultMessage.DefaultBehaviour("Ledger Code Already added.");
                        resultMessage.DisplayMessage = "Ledger Code Already added";
                        return resultMessage;
                    }

                }
                #endregion

                #region Check Duplication Of Ledger Name
                if (tblFinLedgerTO.LedgerName != null && !String.IsNullOrEmpty(tblFinLedgerTO.LedgerName))
                {

                    Boolean isDuplicateLedger = _iTblFinLedgerDAO.isDuplicateLedgerCode(tblFinLedgerTO.LedgerCode, tblFinLedgerTO.LedgerName, 2, tblFinLedgerTO.IdFinLedger);
                    if (isDuplicateLedger)
                    {
                        tran.Rollback();
                        resultMessage.DefaultBehaviour("Ledger Name Already added.");
                        resultMessage.DisplayMessage = "Ledger Name Already added";
                        return resultMessage;
                    }

                }
                #endregion

                int result = _iTblFinLedgerDAO.UpdateTblFinLedger(tblFinLedgerTO, conn, tran);
                if (result != 1)
                {
                    tran.Rollback();
                    resultMessage.DefaultBehaviour("Error While UpdateTblFinLedger in DAO");
                    return resultMessage;
                }

                if (isSAPEnable)
                {
                    resultMessage = SaveOrUpdateLedgerInSAP(tblFinLedgerTO, false);
                    if (resultMessage.MessageType != ResultMessageE.Information)
                    {
                        tran.Rollback();
                        return resultMessage;
                    }
                }

                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "UpdateFinLedger");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        public ResultMessage MigrateDefaultChartOfActFromSAP()
        {
            ResultMessage resultMessage = new ResultMessage();
            String sqlConnStr = _iConnectionString.GetConnectionString(Constants.CONNECTION_STRING);
            SqlConnection conn = new SqlConnection(sqlConnStr);
            SqlTransaction tran = null;
            try
            {
                conn.Open();
                tran = conn.BeginTransaction();
                List<TblFinLedgerTO> sapLedgerList = _iTblFinLedgerDAO.SelectChildLedgerListFromSAP("0");
                resultMessage = SaveLedgerFromSAPToSWDB(sapLedgerList, conn, tran);
                if (resultMessage.MessageType != ResultMessageE.Information)
                {
                    tran.Rollback();
                    return resultMessage;
                }


                tran.Commit();
                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "MigrateDefaultChartOfActFromSAP");
                return resultMessage;
            }
            finally
            {
                conn.Close();
            }
        }

        public ResultMessage SaveLedgerFromSAPToSWDB(List<TblFinLedgerTO> sapLedgerList, SqlConnection conn, SqlTransaction tran)
        {
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                for (int i = 0; i < sapLedgerList.Count; i++)
                {
                    int result = _iTblFinLedgerDAO.InsertTblFinLedger(sapLedgerList[i], conn, tran);
                    if (result != 1)
                    {
                        resultMessage.DefaultBehaviour("Error while inserting ledger Code: " + sapLedgerList[i].LedgerCode);
                        return resultMessage;
                    }

                    List<TblFinLedgerTO> childLedgerList = _iTblFinLedgerDAO.SelectChildLedgerListFromSAP(sapLedgerList[i].LedgerCode);
                    if (childLedgerList != null && childLedgerList.Count > 0)
                    {
                        childLedgerList.ForEach(x => x.ParentFinLedgerId = sapLedgerList[i].IdFinLedger);
                        resultMessage = SaveLedgerFromSAPToSWDB(childLedgerList, conn, tran);

                        if (resultMessage.MessageType != ResultMessageE.Information)
                        {
                            return resultMessage;
                        }
                    }
                }

                resultMessage.DefaultSuccessBehaviour();
                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "SaveLedgerFromSAPToSWDB");
                return resultMessage;
            }
        }

        public ResultMessage ImportExcelCOAToSystem(DataTable dataTable)
        { 
            ResultMessage resultMessage = new ResultMessage();
            try
            {
                string validationErrors = string.Empty;
                #region 1. Convert Datatable to Ledger Object List
                List<TblFinLedgerTO> ledgerList = ConvertDTToList(dataTable);
                if(ledgerList==null || ledgerList.Count==0)
                {
                    resultMessage.DefaultBehaviour("No Records Found");
                    return resultMessage;
                }
                #endregion

                #region 2. Validate Ledger List
                //Validate Group Or Ledger
                var typeMismtach = ledgerList.Where(x => x.Type != 1 && x.Type != 2).ToList();
                if (typeMismtach != null && typeMismtach.Count > 0)
                {
                    string typeMismatchStr = "GroupOrLedger is not mentioned as Group Or Ledger For - " + Environment.NewLine;
                    for (int tm = 0; tm < typeMismtach.Count; tm++)
                    {
                        typeMismatchStr += typeMismtach[tm].LedgerCode + " ,";
                    }
                    validationErrors += typeMismatchStr + Environment.NewLine;
                }

                //Validate Account Type
                var actTypeMismtach = ledgerList.Where(x => x.FinAccountTypeId != 1 && x.FinAccountTypeId != 2 && x.FinAccountTypeId!=3).ToList();
                if (actTypeMismtach != null && actTypeMismtach.Count > 0)
                {
                    string acttypeMismatchStr = "Account Type not mentioned as Revenue Or Expenditure Or Other For - " + Environment.NewLine;
                    for (int tm = 0; tm < actTypeMismtach.Count; tm++)
                    {
                        acttypeMismatchStr += typeMismtach[tm].LedgerCode + " ,";
                    }
                    validationErrors += acttypeMismatchStr + Environment.NewLine;
                }

                //Validate Duplicate Count
                List<String> duplicates = ledgerList.GroupBy(x => x.LedgerCode)
                             .Where(g => g.Count() > 1)
                             .Select(g => g.Key)
                             .ToList();

                if (duplicates != null && duplicates.Count > 0)
                {
                    string duplicatesStr = "Duplicate Ledger Code - " + Environment.NewLine;
                    for (int tm = 0; tm < duplicates.Count; tm++)
                    {
                        duplicatesStr += duplicates[tm] + " ,";
                    }
                    validationErrors += duplicatesStr + Environment.NewLine;
                }

                //Parent Ledger Codes should be from Ledger Codes
                List<string> ledgerCodeList = ledgerList.GroupBy(x => x.LedgerCode).Select(g => g.Key).ToList();
                List<string> pLedgerCodeList = ledgerList.Where(c => c.ParentLedgerCode != "0").GroupBy(x => x.ParentLedgerCode).Select(g => g.Key).ToList();

                List<string> difference = pLedgerCodeList.Except(ledgerCodeList).ToList();
                if (difference != null && difference.Count > 0)
                {
                    string differenceStr = "Parent Ledger Code Should be From Ledger codes only. Following are not - " + Environment.NewLine;

                    for (int df = 0; df < difference.Count; df++)
                    {
                        differenceStr += difference[df] + ",";
                    }
                    validationErrors += differenceStr + Environment.NewLine;
                }

                if(!string.IsNullOrEmpty(validationErrors))
                {
                    resultMessage.DefaultBehaviour(validationErrors);
                    return resultMessage;
                }
                #endregion

                #region 3. Save Ledger List

                #endregion

                return resultMessage;
            }
            catch (Exception ex)
            {
                resultMessage.DefaultExceptionBehaviour(ex, "");
                return resultMessage;
            }
        }

        public List<TblFinLedgerTO> ConvertDTToList(DataTable tblFinLedgerTODT)
        {
            List<TblFinLedgerTO> tblFinLedgerTOList = new List<TblFinLedgerTO>();
            if (tblFinLedgerTODT != null)
            {

                for (int rowCount = 0; rowCount < tblFinLedgerTODT.Rows.Count; rowCount++)
                {
                    TblFinLedgerTO tblFinLedgerTONew = new TblFinLedgerTO();
                    if (tblFinLedgerTODT.Rows[rowCount]["LedgerCode"] != DBNull.Value)
                        tblFinLedgerTONew.LedgerCode = Convert.ToString(tblFinLedgerTODT.Rows[rowCount]["LedgerCode"].ToString());

                    if (tblFinLedgerTODT.Rows[rowCount]["GroupOrLedgerName"] != DBNull.Value)
                        tblFinLedgerTONew.LedgerName = Convert.ToString(tblFinLedgerTODT.Rows[rowCount]["GroupOrLedgerName"].ToString());

                    if (tblFinLedgerTODT.Rows[rowCount]["GroupOrLedger"] != DBNull.Value)
                    {
                        string GroupOrLedger = Convert.ToString(tblFinLedgerTODT.Rows[rowCount]["GroupOrLedger"].ToString());
                        if (GroupOrLedger == "Group")
                            tblFinLedgerTONew.Type = 1;
                        else if (GroupOrLedger == "Ledger")
                            tblFinLedgerTONew.Type = 2;
                        else
                            tblFinLedgerTONew.Type = 0;
                    }

                    if (tblFinLedgerTODT.Rows[rowCount]["ParentLedgerCode"] != DBNull.Value)
                        tblFinLedgerTONew.ParentLedgerCode = Convert.ToString(tblFinLedgerTODT.Rows[rowCount]["ParentLedgerCode"].ToString());

                    if (tblFinLedgerTODT.Rows[rowCount]["AccountType"] != DBNull.Value)
                    {
                        string AccountType = Convert.ToString(tblFinLedgerTODT.Rows[rowCount]["AccountType"].ToString());
                        if (AccountType == "Revenue")
                            tblFinLedgerTONew.FinAccountTypeId = 1;
                        else if (AccountType == "Expenditure")
                            tblFinLedgerTONew.FinAccountTypeId = 2;
                        else if (AccountType == "Other")
                            tblFinLedgerTONew.FinAccountTypeId = 3;
                        else
                            tblFinLedgerTONew.FinAccountTypeId = 0;
                    }

                    if (tblFinLedgerTODT.Rows[rowCount]["ControlAccount"] != DBNull.Value)
                    {
                        string ControlAccount = Convert.ToString(tblFinLedgerTODT.Rows[rowCount]["ControlAccount"].ToString());
                        if (ControlAccount == "Yes")
                            tblFinLedgerTONew.ControlAct = 1;
                        else
                            tblFinLedgerTONew.ControlAct = 0;
                    }

                    if (tblFinLedgerTODT.Rows[rowCount]["CashAccount"] != DBNull.Value)
                    {
                        string CashAccount = Convert.ToString(tblFinLedgerTODT.Rows[rowCount]["CashAccount"].ToString());
                        if (CashAccount == "Yes")
                            tblFinLedgerTONew.CashAct = 1;
                        else
                            tblFinLedgerTONew.CashAct = 0;
                    }

                    if (tblFinLedgerTODT.Rows[rowCount]["BlockManualPosting"] != DBNull.Value)
                    {
                        string BlockManualPosting = Convert.ToString(tblFinLedgerTODT.Rows[rowCount]["BlockManualPosting"].ToString());
                        if (BlockManualPosting == "Yes")
                            tblFinLedgerTONew.BlockManul = 1;
                        else
                            tblFinLedgerTONew.BlockManul = 0;
                    }

                    if (tblFinLedgerTODT.Rows[rowCount]["Reval"] != DBNull.Value)
                    {
                        string Reval = Convert.ToString(tblFinLedgerTODT.Rows[rowCount]["Reval"].ToString());
                        if (Reval == "Yes")
                            tblFinLedgerTONew.Reval = 1;
                        else
                            tblFinLedgerTONew.Reval = 0;
                    }

                    if (tblFinLedgerTODT.Rows[rowCount]["CashFlowRelevant"] != DBNull.Value)
                    {
                        string CashFlowRelevant = Convert.ToString(tblFinLedgerTODT.Rows[rowCount]["CashFlowRelevant"].ToString());
                        if (CashFlowRelevant == "Yes")
                            tblFinLedgerTONew.CashFlow = 1;
                        else
                            tblFinLedgerTONew.CashFlow = 0;
                    }

                    tblFinLedgerTOList.Add(tblFinLedgerTONew);
                }
            }

            return tblFinLedgerTOList;
        }

        #endregion

    }
}
